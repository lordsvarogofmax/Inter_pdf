import os
import sys
import logging
import requests
from io import BytesIO
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
import PyPDF2
from dotenv import load_dotenv

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# === –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• ===
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not BOT_TOKEN or not WEBHOOK_URL:
    logger.critical("‚ùå BOT_TOKEN or WEBHOOK_URL is missing! Set them in Render Environment Variables.")
    sys.exit(1)

# === FLASK ===
app = Flask(__name__)

# === TELEGRAM APPLICATION ===
application = Application.builder().token(BOT_TOKEN).build()

# === –û–ë–†–ê–ë–û–¢–ö–ê PDF ===
async def handle_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"üì• Received PDF from user {user_id}")

    try:
        doc = update.message.document
        if doc.mime_type != "application/pdf":
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª.")
            return

        file = await doc.get_file()
        file_bytes = await file.download_as_bytearray()
        logger.info(f"üíæ Downloaded {len(file_bytes)} bytes")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        pdf_reader = PyPDF2.PdfReader(BytesIO(file_bytes))
        raw_text = ""
        for i, page in enumerate(pdf_reader.pages):
            text = page.extract_text() or ""
            raw_text += text + "\n"
        logger.info(f"üìÑ Extracted {len(raw_text)} characters")

        if not raw_text.strip():
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF.")
            return

        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenRouter (–µ—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å)
        if OPENROUTER_API_KEY:
            logger.info("üß† Sending to OpenRouter...")
            structured_text = await structure_with_openrouter(raw_text)
        else:
            logger.info("‚è≠Ô∏è Skipping OpenRouter")
            structured_text = raw_text

        # –û—Ç–ø—Ä–∞–≤–∫–∞ TXT
        txt_file = BytesIO(structured_text.encode("utf-8"))
        txt_file.name = "output.txt"
        await update.message.reply_document(document=txt_file)
        logger.info("üì§ Sent TXT file")

    except Exception as e:
        logger.exception("üí• Error in handle_pdf:")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")


async def structure_with_openrouter(text: str) -> str:
    prompt = f"""
–†–∞–∑–±–µ–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –±–ª–æ–∫–∏.
–°–æ—Ö—Ä–∞–Ω–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–º—ã—Å–ª, –Ω–æ —Å–¥–µ–ª–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É —á–∏—Ç–∞–µ–º–æ–π.
–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.

–¢–µ–∫—Å—Ç:
{text}
"""
    try:
        resp = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={"Authorization": f"Bearer {OPENROUTER_API_KEY}"},
            json={
                "model": "meta-llama/llama-3-8b-instruct:free",
                "messages": [{"role": "user", "content": prompt}]
            },
            timeout=30
        )
        if resp.status_code == 200:
            content = resp.json()["choices"][0]["message"]["content"].strip()
            logger.info("‚úÖ OpenRouter returned structured text")
            return content
        else:
            logger.error(f"OpenRouter error: {resp.status_code} ‚Äì {resp.text}")
            return text
    except Exception as e:
        logger.exception("OpenRouter request failed")
        return text


# === WEBHOOK ENDPOINT ===
@app.route("/webhook", methods=["POST"])
def telegram_webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put(update)
    return "OK", 200


# === –£–°–¢–ê–ù–û–í–ö–ê WEBHOOK –ß–ï–†–ï–ó HTTP (–°–ò–ù–•–†–û–ù–ù–û) ===
def set_webhook_sync():
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
    resp = requests.post(url, json={"url": WEBHOOK_URL})
    if resp.ok and resp.json().get("ok"):
        logger.info(f"‚úÖ Webhook successfully set to: {WEBHOOK_URL}")
    else:
        logger.error(f"‚ùå Failed to set webhook: {resp.text}")


# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    logger.info("üöÄ Starting bot...")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    set_webhook_sync()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    application.add_handler(MessageHandler(filters.Document.PDF, handle_pdf))

    # –ó–∞–ø—É—Å–∫ Flask
    port = int(os.environ.get("PORT", 10000))
    logger.info(f"üì° Starting Flask server on port {port}")
    app.run(host="0.0.0.0", port=port, use_reloader=False)
