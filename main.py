import os
import sys
import logging
import asyncio
import requests
from io import BytesIO
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
import PyPDF2
from dotenv import load_dotenv

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# === –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ===
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not BOT_TOKEN or not WEBHOOK_URL:
    logger.critical("‚ùå BOT_TOKEN or WEBHOOK_URL not set in environment variables!")
    sys.exit(1)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
app = Flask(__name__)
application = Application.builder().token(BOT_TOKEN).build()

# === –û–ë–†–ê–ë–û–¢–ö–ê PDF ===
async def handle_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"üì• PDF from user {user.id} ({user.username or 'no username'})")

    try:
        doc = update.message.document
        if doc.mime_type != "application/pdf":
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª.")
            return

        file = await doc.get_file()
        file_bytes = await file.download_as_bytearray()
        logger.info(f"üíæ File size: {len(file_bytes)} bytes")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        pdf = PyPDF2.PdfReader(BytesIO(file_bytes))
        raw_text = "\n".join(page.extract_text() or "" for page in pdf.pages)
        logger.info(f"üìÑ Extracted {len(raw_text)} characters")

        if not raw_text.strip():
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF.")
            return

        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á OpenRouter)
        if OPENROUTER_API_KEY:
            logger.info("üß† Structuring with OpenRouter...")
            structured = await structure_with_openrouter(raw_text)
        else:
            structured = raw_text

        # –û—Ç–ø—Ä–∞–≤–∫–∞ TXT
        txt = BytesIO(structured.encode("utf-8"))
        txt.name = "output.txt"
        await update.message.reply_document(document=txt)
        logger.info("üì§ TXT sent")

    except Exception as e:
        logger.exception("üí• Error in handle_pdf:")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")


async def structure_with_openrouter(text: str) -> str:
    prompt = f"""
–†–∞–∑–±–µ–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –±–ª–æ–∫–∏.
–°–æ—Ö—Ä–∞–Ω–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–º—ã—Å–ª, –Ω–æ —Å–¥–µ–ª–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É —á–∏—Ç–∞–µ–º–æ–π.
–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.

–¢–µ–∫—Å—Ç:
{text}
"""
    try:
        resp = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={"Authorization": f"Bearer {OPENROUTER_API_KEY}"},
            json={
                "model": "meta-llama/llama-3-8b-instruct:free",
                "messages": [{"role": "user", "content": prompt}]
            },
            timeout=30
        )
        if resp.status_code == 200:
            return resp.json()["choices"][0]["message"]["content"].strip()
        else:
            logger.error(f"OpenRouter error: {resp.status_code}")
            return text
    except Exception as e:
        logger.exception("OpenRouter failed")
        return text


# === WEBHOOK (–°–ò–ù–•–†–û–ù–ù–´–ô FLASK + –ê–°–ò–ù–•–†–û–ù–ù–´–ô TELEGRAM) ===
@app.route("/webhook", methods=["POST"])
def telegram_webhook():
    json_data = request.get_json(force=True)
    if not json_
        return "Bad Request", 400
    update = Update.de_json(json_data, application.bot)
    asyncio.run(process_update(update))
    return "OK", 200

async def process_update(update: Update):
    await application.process_update(update)


# === –£–°–¢–ê–ù–û–í–ö–ê WEBHOOK –ß–ï–†–ï–ó HTTP ===
def set_webhook_sync():
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
    resp = requests.post(url, json={"url": WEBHOOK_URL})
    if resp.ok and resp.json().get("ok"):
        logger.info(f"‚úÖ Webhook set to: {WEBHOOK_URL}")
    else:
        logger.error(f"‚ùå Webhook failed: {resp.text}")


# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    logger.info("üöÄ Starting bot...")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    set_webhook_sync()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    application.add_handler(MessageHandler(filters.Document.PDF, handle_pdf))

    # –ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É –∏–∑ Render
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port, use_reloader=False)
