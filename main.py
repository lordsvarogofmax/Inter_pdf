import os
import sys
import logging
import asyncio
import requests
import re
from io import BytesIO
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import PyPDF2
from pdf2image import convert_from_bytes
import pytesseract
from PIL import Image
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not BOT_TOKEN or not WEBHOOK_URL:
    logger.critical("‚ùå BOT_TOKEN or WEBHOOK_URL not set!")
    sys.exit(1)

app = Flask(__name__)
_bot_app = None

def get_application():
    global _bot_app
    if _bot_app is None:
        _bot_app = Application.builder().token(BOT_TOKEN).build()
        _bot_app.add_handler(CommandHandler("start", start))
        _bot_app.add_handler(MessageHandler(filters.Document.PDF, handle_pdf))
        _bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        asyncio.run(_bot_app.initialize())
        logger.info("‚úÖ Application initialized")
    return _bot_app

def split_into_paragraphs(text: str) -> list[str]:
    paragraphs = [p.strip() for p in text.split('\n\n') if p.strip()]
    if len(paragraphs) > 1:
        return paragraphs
    sentences = re.split(r'(?<=[.!?])\s+', text.strip())
    grouped = []
    current = ""
    for sentence in sentences:
        if len(current) + len(sentence) < 300:
            current += sentence + " "
        else:
            grouped.append(current.strip())
            current = sentence + " "
    if current:
        grouped.append(current.strip())
    return grouped

def clean_text(text: str) -> str:
    if not text:
        return ""
    text = re.sub(r'([–∞-—è–ê-–Øa-zA-Z])-\n([–∞-—è–ê-–Øa-zA-Z])', r'\1\2', text)
    text = re.sub(r'(?<!\n)\n(?!\n)', ' ', text)
    text = re.sub(r' +', ' ', text)
    text = '\n'.join(line.strip() for line in text.splitlines())
    return text.strip()

async def extract_text_from_pdf(file_bytes: bytes) -> str:
    try:
        reader = PyPDF2.PdfReader(BytesIO(file_bytes))
        raw = "\n".join(page.extract_text() or "" for page in reader.pages)
        if raw.strip():
            logger.info("üìÑ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á—ë–Ω –Ω–∞–ø—Ä—è–º—É—é")
            return clean_text(raw)
    except Exception as e:
        logger.warning(f"–ü—Ä—è–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")

    logger.info("üñºÔ∏è –ó–∞–ø—É—Å–∫ OCR...")
    try:
        images = convert_from_bytes(file_bytes, dpi=200)
        ocr_text = ""
        for i, img in enumerate(images):
            logger.info(f"üñºÔ∏è OCR —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}...")
            text = pytesseract.image_to_string(img, lang='rus+eng')
            ocr_text += text + "\n"
        logger.info("‚úÖ OCR –∑–∞–≤–µ—Ä—à—ë–Ω")
        return clean_text(ocr_text)
    except Exception as e:
        logger.exception("üí• OCR –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return ""

async def improve_text_with_openrouter(text: str) -> str:
    if not OPENROUTER_API_KEY or not text.strip():
        return text

    prompt = f"""
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã.  
–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Ç–µ–∫—Å—Ç, –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π –∏–∑ PDF (–≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏).  
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –µ–≥–æ –≤ **–∏–¥–µ–∞–ª—å–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É**, –≥–æ—Ç–æ–≤—É—é –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.

–°–ª–µ–¥—É–π —ç—Ç–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:

1. **–ò—Å–ø—Ä–∞–≤—å –≤—Å—ë**:  
   - –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏  
   - –°–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è  
   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å–ª–æ–≤  
   - –õ–∏—à–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã  
   - –†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑-–∑–∞ —Ä–∞–∑—Ä—ã–≤–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü

2. **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É**:  
   - –†–∞–∑–¥–µ–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ **–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–±–∑–∞—Ü—ã**  
   - –°–æ—Ö—Ä–∞–Ω–∏ –¥–∏–∞–ª–æ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å  
   - –ù–µ –¥–æ–±–∞–≤–ª—è–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ –±—ã–ª–æ  
   - –ù–µ —Å–æ–∫—Ä–∞—â–∞–π –∏ –Ω–µ —Ä–∞—Å—à–∏—Ä—è–π —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ

3. **–°—Ç–∏–ª—å –∏ —è–∑—ã–∫**:  
   - –°–æ—Ö—Ä–∞–Ω–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å  
   - –ò—Å–ø–æ–ª—å–∑—É–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫

4. **–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞**:  
   - –í–µ—Ä–Ω–∏ **—Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç**  
   - –ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤  
   - –ë–µ–∑ markdown ‚Äî —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏

–¢–µ–∫—Å—Ç:
{text}
"""
    try:
        resp = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={"Authorization": f"Bearer {OPENROUTER_API_KEY}"},
            json={"model": "nousresearch/hermes-3-llama-3.1-405b:free", "messages": [{"role": "user", "content": prompt}]},
            timeout=60
        )
        if resp.status_code == 200:
            return resp.json()["choices"][0]["message"]["content"].strip()
        else:
            logger.error(f"OpenRouter error: {resp.status_code}")
            return text
    except Exception as e:
        logger.exception("OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return text

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –û—Ç–ø—Ä–∞–≤—å PDF ‚Äî —è –ø—Ä–∏—à–ª—é .docx —Å —á–∏—Å—Ç—ã–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.")

async def handle_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        doc = update.message.document
        if doc.mime_type != "application/pdf":
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF.")
            return

        file = await doc.get_file()
        file_bytes = await file.download_as_bytearray()
        raw_text = await extract_text_from_pdf(file_bytes)
        if not raw_text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç.")
            return

        final_text = await improve_text_with_openrouter(raw_text)

        docx_buffer = BytesIO()
        document = Document()
        style = document.styles['Normal']
        font = style.font
        font.name = 'Times New Roman'
        font.size = Pt(12)

        paragraphs = split_into_paragraphs(final_text)
        for para in paragraphs:
            if para.strip():
                p = document.add_paragraph(para.strip())
                p.paragraph_format.space_after = Pt(6)
                p.paragraph_format.space_before = Pt(6)
                p.paragraph_format.line_spacing = 1.15
                p.paragraph_format.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT

        document.save(docx_buffer)
        docx_buffer.seek(0)
        docx_buffer.name = "output.docx"
        await update.message.reply_document(document=docx_buffer)

        reply_markup = ReplyKeyboardMarkup(
            [[KeyboardButton("üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π PDF")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª—è–π —Å–ª–µ–¥—É—é—â–∏–π PDF.", reply_markup=reply_markup)

    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –≤ handle_pdf")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª.")

@app.route("/webhook", methods=["POST"])
def telegram_webhook():
    json_data = request.get_json(force=True)
    if not json_data:
        return "Bad Request", 400

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    try:
        application = get_application()
        update = Update.de_json(json_data, application.bot)
        loop.run_until_complete(application.process_update(update))
        return "OK", 200
    finally:
        loop.close()

def set_webhook_sync():
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
    full_url = WEBHOOK_URL.rstrip("/") + "/webhook"
    resp = requests.post(url, json={"url": full_url})
    if resp.ok and resp.json().get("ok"):
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {full_url}")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {resp.text}")

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    set_webhook_sync()

    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port, use_reloader=False)
