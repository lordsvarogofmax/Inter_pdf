import os
import sys
import logging
import requests
import re
import hashlib
import time
from io import BytesIO
from flask import Flask, request
import PyPDF2
from pdf2image import convert_from_bytes
import pytesseract
from PIL import Image

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not BOT_TOKEN or not WEBHOOK_URL:
    logger.critical("‚ùå BOT_TOKEN or WEBHOOK_URL not set!")
    sys.exit(1)

app = Flask(__name__)

# –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
processed_messages = set()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–∂–∏–¥–∞—é—Ç –ª–∏ –æ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞)
user_states = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö OCR-PDF, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
pending_files = {}

# –û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
DESCRIPTION_MESSAGE = (
    "–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ (PDF ‚Üí –¢–µ–∫—Å—Ç)\n\n"
    "–ë–æ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PDF-—Ñ–∞–π–ª—ã –≤ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç.\n\n"
    "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n\n"
    "‚úÖ  –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ PDF: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ª–∏ —Ñ–∞–π–ª –∏–ª–∏ —Å–∫–∞–Ω\n"
    "‚úÖ  OCR (–ú–∞—à–∏–Ω–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ): –¥–ª—è —Å–∫–∞–Ω–æ–≤, —è–∑—ã–∫–∏ ‚Äî —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n"
    "‚úÖ  –†–µ–∑—É–ª—å—Ç–∞—Ç: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç .txt —Å –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º\n"
    "‚úÖ  –¢–µ–∫—Å—Ç–æ–≤—ã–π PDF: –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é, –±—ã—Å—Ç—Ä–æ (–æ–±—ã—á–Ω–æ 1‚Äì3 —Å–µ–∫—É–Ω–¥—ã)\n"
    "‚úÖ  –°–∫–∞–Ω PDF (OCR):\n\n"
    "- –¥–æ 10 —Å—Ç—Ä–∞–Ω–∏—Ü (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram)\n"
    "- —Ä–∞–∑—É–º–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ/—Å–∫–æ—Ä–æ—Å—Ç—å (–æ–±—ã—á–Ω–æ 1‚Äì4 –º–∏–Ω—É—Ç—ã)\n"
    "- —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞: —Å–∫–ª–µ–π–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤, —É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤\n\n"
    "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n\n"
    "‚ùó –¢–æ–ª—å–∫–æ PDF: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, DOCX –∏ –¥—Ä. –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è\n"
    "‚ùó –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: –º–∞–∫—Å–∏–º—É–º ‚Äî 20 –ú–ë (Telegram Bot API –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É —Å–∫–∞—á–∏–≤–∞—Ç—å —Ñ–∞–π–ª—ã > ~20 –ú–ë –Ω–∞–ø—Ä—è–º—É—é)\n"
    "‚ùó –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –∏—Å—Ö–æ–¥–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ/—Ç–∞–±–ª–∏—Ü—ã/–∫–æ–ª–æ–Ω–∫–∏ –º–æ–≥—É—Ç –ø–æ—Ç–µ—Ä—è—Ç—å—Å—è ‚Äî –Ω–∞ –≤—ã—Ö–æ–¥–µ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç\n"
    "‚ùó –ö–∞—á–µ—Å—Ç–≤–æ OCR: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∫–∞–Ω–∞ (—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, –∫–æ–Ω—Ç—Ä–∞—Å—Ç, —à—É–º)\n\n"
    "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è\n\n"
    "1‚É£   –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é\n"
    "2‚É£   –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª (–¥–æ 20 –ú–ë –¥–ª—è –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–º)\n"
    "‚úÖ  –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ ‚Äî –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç .txt —Å —Ç–µ–∫—Å—Ç–æ–º\n\n"
    "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤: —Å–æ–∂–º–∏—Ç–µ PDF, —Ä–∞–∑–±–µ–π—Ç–µ –ø–æ 10 —Å—Ç—Ä–∞–Ω–∏—Ü, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª."
)

def get_main_keyboard():
    return {
        "keyboard": [[
            {"text": "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é"},
            {"text": "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"}
        ]],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def get_message_hash(message):
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    message_str = str(message.get('message_id', '')) + str(message.get('date', ''))
    return hashlib.md5(message_str.encode()).hexdigest()

def is_message_processed(message_hash):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"""
    return message_hash in processed_messages

def mark_message_processed(message_hash):
    """–û—Ç–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ"""
    processed_messages.add(message_hash)
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞) –µ—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
    if len(processed_messages) > 1000:
        logger.info("üßπ –û—á–∏—â–∞–µ–º –∫—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        processed_messages.clear()

def set_user_waiting_for_file(chat_id, waiting=True):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if waiting:
        user_states[chat_id] = {"waiting_for_file": True, "timestamp": time.time()}
    else:
        user_states.pop(chat_id, None)

def is_user_waiting_for_file(chat_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
    if chat_id not in user_states:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (30 –º–∏–Ω—É—Ç)
    if time.time() - user_states[chat_id]["timestamp"] > 1800:
        user_states.pop(chat_id, None)
        return False
    
    return user_states[chat_id].get("waiting_for_file", False)

def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        data = {"chat_id": chat_id, "text": text}
        if reply_markup:
            data["reply_markup"] = reply_markup
        
        response = requests.post(url, json=data, timeout=10)
        if not response.ok:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code} - {response.text}")
        else:
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
    except requests.exceptions.Timeout:
        logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

def send_document(chat_id, file_buffer, filename):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ Telegram —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendDocument"
        files = {"document": (filename, file_buffer, "text/plain")}
        data = {"chat_id": chat_id}
        
        response = requests.post(url, files=files, data=data, timeout=60)
        if not response.ok:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {response.status_code} - {response.text}")
        else:
            logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç {filename} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
    except requests.exceptions.Timeout:
        logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

def answer_callback_query(callback_query_id, text=None):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–Ω—è—Ç–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/answerCallbackQuery"
        data = {"callback_query_id": callback_query_id}
        if text:
            data["text"] = text
        response = requests.post(url, data=data, timeout=10)
        if not response.ok:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ answerCallbackQuery: {response.status_code} - {response.text}")
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ answerCallbackQuery")

def build_split_options_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ OCR-PDF"""
    return {
        "inline_keyboard": [[
            {"text": "‚úÇÔ∏è —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª", "callback_data": "SPLIT_PDF"},
            {"text": "üîü —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–∞–Ω–∏—Ü", "callback_data": "OCR_FIRST_10"}
        ]]
    }

def clean_text(text):
    """–û—á–∏—â–∞–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
    if not text:
        return ""
    text = re.sub(r'([–∞-—è–ê-–Øa-zA-Z])-\n([–∞-—è–ê-–Øa-zA-Z])', r'\1\2', text)
    text = re.sub(r'(?<!\n)\n(?!\n)', ' ', text)
    text = re.sub(r' +', ' ', text)
    text = '\n'.join(line.strip() for line in text.splitlines())
    return text.strip()

def handle_file_questions(text):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –æ —Ñ–∞–π–ª–∞—Ö –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö"""
    text_lower = text.lower()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ñ–∞–π–ª–∞—Ö
    file_keywords = ['—Ñ–∞–π–ª', '—Ñ–∞–π–ª—ã', '–æ—Ç–ø—Ä–∞–≤', '–∑–∞–≥—Ä—É', 'pdf', '—Ñ–æ—Ä–º–∞—Ç', '—Ç–∏–ø', '—Ä–∞–∑–º–µ—Ä', '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω']
    question_keywords = ['–∫–∞–∫–∏–µ', '—á—Ç–æ', '–º–æ–∂–Ω–æ', '–∫–∞–∫', '–∫–∞–∫–æ–π', '—Å–∫–æ–ª—å–∫–æ', '–º–∞–∫—Å–∏–º–∞–ª—å–Ω', '–ª–∏–º–∏—Ç']
    
    is_file_question = any(keyword in text_lower for keyword in file_keywords)
    is_question = any(keyword in text_lower for keyword in question_keywords)
    
    if is_file_question and is_question:
        return """üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö:**

‚úÖ **–ü—Ä–∏–Ω–∏–º–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:** –¢–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã
üìè **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:** 20 –ú–ë
‚è±Ô∏è **–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** 
   ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ PDF: 1-3 —Å–µ–∫—É–Ω–¥—ã
   ‚Ä¢ –°–∫–∞–Ω—ã (OCR): 1-3 –º–∏–Ω—É—Ç—ã
üìÑ **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:** 
   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è OCR
   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤

üí° **–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª:**
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é"
2. –í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª
3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏

‚ùì **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    
    return None

def extract_text_from_pdf(file_bytes, is_ocr_needed=False, progress_callback=None, first_page=None, last_page=None, max_pages_default=10):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.

    –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è OCR, –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü —á–µ—Ä–µ–∑ first_page/last_page.
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–µ—Ä–≤—ã–µ max_pages_default —Å—Ç—Ä–∞–Ω–∏—Ü.
    """
    if not is_ocr_needed:
        try:
            reader = PyPDF2.PdfReader(BytesIO(file_bytes))
            raw = "\n".join(page.extract_text() or "" for page in reader.pages)
            if raw.strip():
                logger.info("üìÑ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ PDF")
                return clean_text(raw)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é: {e}")

    logger.info("üñºÔ∏è –ó–∞–ø—É—Å–∫ OCR...")
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —É–º–µ–Ω—å—à–∞–µ–º DPI –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        fp = first_page if first_page is not None else 1
        lp = last_page if last_page is not None else max_pages_default
        if lp < fp:
            fp, lp = lp, fp
        images = convert_from_bytes(file_bytes, dpi=150, first_page=fp, last_page=lp)
        
        ocr_text = ""
        for i, img in enumerate(images):
            if progress_callback:
                progress_callback(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {i+1}/{len(images)}")
            else:
                logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {i+1}/{len(images)}")
            
            try:
                # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
                if img.width > 2000 or img.height > 2000:
                    img.thumbnail((2000, 2000), Image.Resampling.LANCZOS)
                    logger.info(f"üìè –£–º–µ–Ω—å—à–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ {img.size}")
                
                # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã OCR —Å fallback
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º whitelist (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫)
                    safe_whitelist = (
                        "0123456789"
                        "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                        "abcdefghijklmnopqrstuvwxyz"
                        "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
                        "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
                        ".,:;!?()-_"
                    )
                    text = pytesseract.image_to_string(
                        img,
                        lang='rus+eng',
                        config=f"--psm 6 --oem 3 -c tessedit_char_whitelist={safe_whitelist}"
                    )
                except Exception as whitelist_error:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å whitelist, –ø—Ä–æ–±—É—é –±–µ–∑ –Ω–µ–≥–æ: {whitelist_error}")
                    # Fallback –±–µ–∑ whitelist
                    text = pytesseract.image_to_string(
                        img, 
                        lang='rus+eng',
                        config='--psm 6 --oem 3'
                    )
                
                ocr_text += text + "\n"
                
                if progress_callback:
                    progress_callback(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                else:
                    logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                time.sleep(0.5)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ OCR –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {i+1}: {e}")
                if progress_callback:
                    progress_callback(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {i+1}, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                continue
                
        logger.info("‚úÖ OCR –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return clean_text(ocr_text)
        
    except Exception as e:
        logger.exception("üí• OCR –ø—Ä–æ–≤–∞–ª–µ–Ω")
        raise

@app.route("/webhook", methods=["POST"])
def telegram_webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Telegram —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        data = request.get_json()
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook: {data}")
        
        if not data:
            logger.info("‚ùå –ü—É—Å—Ç–æ–π webhook")
            return "OK", 200

        # Callback-–∫–Ω–æ–ø–∫–∏ (inline)
        if "callback_query" in data:
            cb = data["callback_query"]
            callback_id = cb.get("id")
            from_user = cb.get("from", {})
            chat = cb.get("message", {}).get("chat", {})
            chat_id = chat.get("id")
            action = cb.get("data")
            logger.info(f"üñ±Ô∏è Callback: {action} –æ—Ç {from_user.get('id')} –≤ —á–∞—Ç–µ {chat_id}")

            if callback_id:
                answer_callback_query(callback_id)

            pending = pending_files.get(chat_id)
            if not pending:
                send_message(chat_id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∑–∞–Ω–æ–≤–æ.")
                return "OK", 200

            file_bytes = pending.get("file_bytes")
            base_name = pending.get("file_name", "converted.pdf")
            total_pages = pending.get("num_pages", 0)

            def progress_callback(msg):
                logger.info(f"üìä {msg}")

            if action == "OCR_FIRST_10":
                send_message(chat_id, "üîü –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–∞–Ω–∏—Ü...")
                try:
                    text = extract_text_from_pdf(
                        file_bytes,
                        is_ocr_needed=True,
                        progress_callback=progress_callback,
                        first_page=1,
                        last_page=min(10, total_pages)
                    )
                    if not text.strip():
                        send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–∞–Ω–∏—Ü.")
                    else:
                        txt_name = os.path.splitext(base_name)[0] + "_p1-" + str(min(10, total_pages)) + ".txt"
                        txt_buffer = BytesIO(text.encode("utf-8"))
                        send_document(chat_id, txt_buffer, txt_name)
                        send_message(chat_id, "‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–∞–Ω–∏—Ü.")
                except Exception as e:
                    logger.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ OCR –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–∞–Ω–∏—Ü")
                    send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–∞–Ω–∏—Ü.")
                finally:
                    pending_files.pop(chat_id, None)
                    set_user_waiting_for_file(chat_id, False)
                return "OK", 200

            if action == "SPLIT_PDF":
                send_message(chat_id, f"‚úÇÔ∏è –ù–∞—á–∏–Ω–∞—é –¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 10 —Å—Ç—Ä–∞–Ω–∏—Ü (–≤—Å–µ–≥–æ {total_pages}).")
                part_index = 1
                for start in range(1, total_pages + 1, 10):
                    end = min(start + 9, total_pages)
                    send_message(chat_id, f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã {start}-{end}...")
                    try:
                        part_text = extract_text_from_pdf(
                            file_bytes,
                            is_ocr_needed=True,
                            progress_callback=progress_callback,
                            first_page=start,
                            last_page=end
                        )
                        if not part_text.strip():
                            send_message(chat_id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü {start}-{end}.")
                        else:
                            txt_name = os.path.splitext(base_name)[0] + f"_part{part_index}_p{start}-{end}.txt"
                            txt_buffer = BytesIO(part_text.encode("utf-8"))
                            send_document(chat_id, txt_buffer, txt_name)
                            send_message(chat_id, f"‚úÖ –ì–æ—Ç–æ–≤–æ: —Å—Ç—Ä–∞–Ω–∏—Ü—ã {start}-{end} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
                    except Exception as e:
                        logger.exception(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü {start}-{end}")
                        send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü {start}-{end}.")
                    finally:
                        part_index += 1
                send_message(chat_id, "üéâ –í—Å–µ —á–∞—Å—Ç–∏ –≥–æ—Ç–æ–≤—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª.")
                pending_files.pop(chat_id, None)
                set_user_waiting_for_file(chat_id, False)
                return "OK", 200

            send_message(chat_id, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return "OK", 200

        if "message" not in data:
            logger.info("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö")
            return "OK", 200

        message = data["message"]
        message_id = message.get("message_id", "unknown")
        chat_id = message["chat"]["id"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ
        message_hash = get_message_hash(message)
        if is_message_processed(message_hash):
            logger.info(f"üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message_id}")
            return "OK", 200
        
        # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ
        mark_message_processed(message_hash)
        logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message_id}")

        if "text" in message:
            text = message["text"]
            if text == "/start":
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                set_user_waiting_for_file(chat_id, False)
                reply_markup = get_main_keyboard()
                send_message(
                    chat_id,
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –≤ —Ç–µ–∫—Å—Ç.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                    reply_markup
                )
            elif text == "/stop":
                set_user_waiting_for_file(chat_id, False)
                send_message(chat_id, "üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
            elif text == "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é":
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                set_user_waiting_for_file(chat_id, True)
                send_message(
                    chat_id,
                    "üìé –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.\n\nüí° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20 –ú–ë"
                )
            elif text == "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è":
                # –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
                send_message(chat_id, DESCRIPTION_MESSAGE)
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–ø—Ä–æ—Å –æ —Ñ–∞–π–ª–∞—Ö
                file_info = handle_file_questions(text)
                if file_info:
                    send_message(chat_id, file_info)
                else:
                    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞, —Å–∫–ª–æ–Ω—è–µ–º –∫ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
                    if not is_user_waiting_for_file(chat_id):
                        send_message(
                            chat_id,
                            "üìé –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å PDF-—Ñ–∞–π–ª–∞–º–∏.\n\n"
                            "üí° **–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª:**\n"
                            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é¬ª\n"
                            "2. –í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª\n"
                            "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
                            "‚ùì **–í–æ–ø—Ä–æ—Å—ã –æ —Ñ–∞–π–ª–∞—Ö?** –°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö, —Ä–∞–∑–º–µ—Ä–∞—Ö –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö!"
                        )
                    else:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç
                        send_message(
                            chat_id,
                            "üìé –Ø –∂–¥—É PDF —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.\n\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –æ—Ç–º–µ–Ω—ã."
                        )
        elif "document" in message:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
            if not is_user_waiting_for_file(chat_id):
                send_message(
                    chat_id,
                    "üìé –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é¬ª, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª.\n\n"
                    "üí° –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å!"
                )
                return "OK", 200
            
            doc = message["document"]
            if doc.get("mime_type") != "application/pdf":
                send_message(chat_id, "‚ùå –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª.")
                return "OK", 200

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = doc.get("file_size", 0)
            if file_size > 50 * 1024 * 1024:  # 50 –ú–ë
                send_message(chat_id, "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë")
                return "OK", 200
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram Bot API –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞–ø—Ä—è–º—É—é ~20 –ú–ë
            if file_size > 20 * 1024 * 1024:
                send_message(
                    chat_id,
                    "‚ùå –≠—Ç–æ—Ç PDF –±–æ–ª—å—à–µ 20 –ú–ë. –ë–æ—Ç—ã Telegram –Ω–µ –º–æ–≥—É—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Ñ–∞–π–ª—ã.\n"
                    "üì¶ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∂–º–∏—Ç–µ PDF, —Ä–∞–∑–±–µ–π—Ç–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª."
                )
                return "OK", 200

            if file_size > 10 * 1024 * 1024:  # 10 –ú–ë
                send_message(chat_id, "‚ö†Ô∏è –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª. –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")

            send_message(chat_id, "‚è≥ –ü—Ä–∏–Ω—è–ª PDF. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

            try:
                file_id = doc["file_id"]
                logger.info(f"üìÅ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª ID: {file_id}")
                
                resp = requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/getFile?file_id={file_id}", timeout=10)
                if not resp.ok:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {resp.status_code} - {resp.text}")
                    send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.")
                    return "OK", 200
                
                file_path = resp.json()["result"]["file_path"]
                file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"
                
                file_resp = requests.get(file_url, timeout=60)  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                if not file_resp.ok:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {file_resp.status_code}")
                    send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.")
                    return "OK", 200
                
                file_bytes = file_resp.content
                logger.info(f"üìÑ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(file_bytes)} –±–∞–π—Ç")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–µ–∫—Å—Ç–æ–≤—ã–π PDF –∏–ª–∏ —Å–∫–∞–Ω?
                try:
                    reader = PyPDF2.PdfReader(BytesIO(file_bytes))
                    raw = "\n".join(page.extract_text() or "" for page in reader.pages)
                    is_ocr_needed = not raw.strip()
                    logger.info(f"üîç PDF —Ç–∏–ø: {'—Å–∫–∞–Ω (—Ç—Ä–µ–±—É–µ—Ç OCR)' if is_ocr_needed else '—Ç–µ–∫—Å—Ç–æ–≤—ã–π'}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ PDF: {e}")
                    is_ocr_needed = True

                # –û–ø—Ä–µ–¥–µ–ª–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–¥–ª—è OCR-—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤)
                num_pages = 0
                try:
                    reader = PyPDF2.PdfReader(BytesIO(file_bytes))
                    num_pages = len(reader.pages)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {e}")

                if is_ocr_needed and num_pages > 10:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
                    pending_files[chat_id] = {
                        "file_bytes": file_bytes,
                        "file_name": doc.get("file_name", "converted.pdf"),
                        "num_pages": num_pages,
                        "created_at": time.time()
                    }
                    send_message(
                        chat_id,
                        f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PDF –Ω–∞ {num_pages} —Å—Ç—Ä–∞–Ω–∏—Ü.\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å:",
                        reply_markup=build_split_options_keyboard()
                    )
                    return "OK", 200
                else:
                    if is_ocr_needed:
                        send_message(
                            chat_id,
                            "üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∫–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É—é OCR. –≠—Ç–æ –∑–∞–π–º—ë—Ç 1-3 –º–∏–Ω—É—Ç—ã..."
                        )

                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                def progress_callback(message):
                    logger.info(f"üìä {message}")

                text = extract_text_from_pdf(
                    file_bytes,
                    is_ocr_needed=is_ocr_needed,
                    progress_callback=progress_callback
                )
                if not text.strip():
                    send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç.")
                    return "OK", 200

                base_name = doc.get("file_name", "converted")
                txt_name = os.path.splitext(base_name)[0] + ".txt"
                txt_buffer = BytesIO(text.encode("utf-8"))
                send_document(chat_id, txt_buffer, txt_name)

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                set_user_waiting_for_file(chat_id, False)

                reply_markup = get_main_keyboard()
                send_message(
                    chat_id,
                    "‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á—ë–Ω.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π PDF!",
                    reply_markup
                )

            except Exception as e:
                logger.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF")
                set_user_waiting_for_file(chat_id, False)
                send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    except Exception as e:
        logger.exception("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ webhook")
        # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å
        return "OK", 200

    return "OK", 200

def set_webhook():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
        webhook_url = WEBHOOK_URL.rstrip("/") + "/webhook"
        resp = requests.post(url, json={"url": webhook_url}, timeout=10)
        if resp.ok:
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {resp.status_code} - {resp.text}")
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    set_webhook()

    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)