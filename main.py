import os
import sys
import logging
import asyncio
import requests
import re
from io import BytesIO
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import PyPDF2
from pdf2image import convert_from_bytes
import pytesseract
from PIL import Image

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

# === –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not BOT_TOKEN or not WEBHOOK_URL:
    logger.critical("‚ùå BOT_TOKEN or WEBHOOK_URL not set!")
    sys.exit(1)

app = Flask(__name__)
_bot_app = None

def get_application():
    global _bot_app
    if _bot_app is None:
        _bot_app = Application.builder().token(BOT_TOKEN).build()
        _bot_app.add_handler(CommandHandler("start", start))
        _bot_app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
        _bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        asyncio.run(_bot_app.initialize())
        logger.info("‚úÖ Application initialized")
    return _bot_app

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def clean_text(text: str) -> str:
    if not text:
        return ""
    text = re.sub(r'([–∞-—è–ê-–Øa-zA-Z])-\n([–∞-—è–ê-–Øa-zA-Z])', r'\1\2', text)
    text = re.sub(r'(?<!\n)\n(?!\n)', ' ', text)
    text = re.sub(r' +', ' ', text)
    text = '\n'.join(line.strip() for line in text.splitlines())
    return text.strip()

async def extract_text_from_pdf(file_bytes: bytes, is_ocr_needed: bool = False) -> str:
    if not is_ocr_needed:
        try:
            reader = PyPDF2.PdfReader(BytesIO(file_bytes))
            raw = "\n".join(page.extract_text() or "" for page in reader.pages)
            if raw.strip():
                logger.info("üìÑ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á—ë–Ω –Ω–∞–ø—Ä—è–º—É—é")
                return clean_text(raw)
        except Exception as e:
            logger.warning(f"–ü—Ä—è–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")

    # OCR
    logger.info("üñºÔ∏è –ó–∞–ø—É—Å–∫ OCR...")
    try:
        images = convert_from_bytes(file_bytes, dpi=200)
        ocr_text = ""
        for i, img in enumerate(images):
            logger.info(f"üñºÔ∏è OCR —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}...")
            text = pytesseract.image_to_string(img, lang='rus+eng')
            ocr_text += text + "\n"
        logger.info("‚úÖ OCR –∑–∞–≤–µ—Ä—à—ë–Ω")
        return clean_text(ocr_text)
    except Exception as e:
        logger.exception("üí• OCR –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–≤–∞–ª–µ–Ω")
        raise

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(
        [[KeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é")]],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –≤ —Ç–µ–∫—Å—Ç.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=reply_markup
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìé –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å PDF-—Ñ–∞–π–ª–∞–º–∏.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é¬ª."
    )

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc = update.message.document

    if doc.mime_type != "application/pdf":
        await update.message.reply_text("‚ùå –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF.")
        return

    await update.message.reply_text("‚è≥ –ü—Ä–∏–Ω—è–ª PDF. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    try:
        file = await doc.get_file()
        file_bytes = await file.download_as_bytearray()
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω PDF: {doc.file_name or '–±–µ–∑ –∏–º–µ–Ω–∏'}, {len(file_bytes)} –±–∞–π—Ç")

        # –ü—Ä–æ–≤–µ—Ä–∏–º, —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ª–∏ PDF
        try:
            reader = PyPDF2.PdfReader(BytesIO(file_bytes))
            raw = "\n".join(page.extract_text() or "" for page in reader.pages)
            is_ocr_needed = not raw.strip()
        except:
            is_ocr_needed = True

        if is_ocr_needed:
            await update.message.reply_text(
                "üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∫–∞–Ω –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É—é OCR (—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∫–∞—Ä—Ç–∏–Ω–æ–∫).\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30‚Äì60 —Å–µ–∫—É–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            )

        text = await extract_text_from_pdf(file_bytes, is_ocr_needed=is_ocr_needed)

        if not text.strip():
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –ø—É—Å—Ç.")
            return

        # –ò–º—è —Ñ–∞–π–ª–∞: –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è PDF ‚Üí .txt
        base_name = doc.file_name
        if base_name:
            txt_name = os.path.splitext(base_name)[0] + ".txt"
        else:
            txt_name = "converted.txt"

        txt_buffer = BytesIO(text.encode("utf-8"))
        txt_buffer.name = txt_name
        await update.message.reply_document(document=txt_buffer)

        reply_markup = ReplyKeyboardMarkup(
            [[KeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é")]],
            resize_keyboard=True,
            one_time_keyboard=False
        )
        await update.message.reply_text(
            "‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á—ë–Ω.\n\n"
            "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π PDF!",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π PDF."
        )

# === WEBHOOK ===

@app.route("/webhook", methods=["POST"])
def telegram_webhook():
    json_data = request.get_json(force=True)
    if not json_data:
        return "Bad Request", 400

    import asyncio
    from telegram import Update

    async def handle():
        application = get_application()
        update = Update.de_json(json_data, application.bot)
        await application.process_update(update)

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(handle())
        return "OK", 200
    finally:
        loop.close()

# === –£–°–¢–ê–ù–û–í–ö–ê WEBHOOK ===

def set_webhook_sync():
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
    full_url = WEBHOOK_URL.rstrip("/") + "/webhook"
    resp = requests.post(url, json={"url": full_url})
    if resp.ok and resp.json().get("ok"):
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {full_url}")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {resp.text}")

# === –ó–ê–ü–£–°–ö ===

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    set_webhook_sync()

    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port, use_reloader=False)
