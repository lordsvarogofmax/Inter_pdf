import os
import sys
import logging
import requests
import re
import hashlib
import time
from io import BytesIO
from flask import Flask, request
import PyPDF2
from pdf2image import convert_from_bytes
import pytesseract
from PIL import Image

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not BOT_TOKEN or not WEBHOOK_URL:
    logger.critical("‚ùå BOT_TOKEN or WEBHOOK_URL not set!")
    sys.exit(1)

app = Flask(__name__)

# –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
processed_messages = set()

def get_message_hash(message):
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    message_str = str(message.get('message_id', '')) + str(message.get('date', ''))
    return hashlib.md5(message_str.encode()).hexdigest()

def is_message_processed(message_hash):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"""
    return message_hash in processed_messages

def mark_message_processed(message_hash):
    """–û—Ç–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ"""
    processed_messages.add(message_hash)
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞) –µ—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
    if len(processed_messages) > 1000:
        logger.info("üßπ –û—á–∏—â–∞–µ–º –∫—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        processed_messages.clear()

def send_message(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        data = {"chat_id": chat_id, "text": text}
        if reply_markup:
            data["reply_markup"] = reply_markup
        
        response = requests.post(url, json=data, timeout=10)
        if not response.ok:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code} - {response.text}")
        else:
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
    except requests.exceptions.Timeout:
        logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

def send_document(chat_id, file_buffer, filename):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ Telegram —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendDocument"
        files = {"document": (filename, file_buffer, "text/plain")}
        data = {"chat_id": chat_id}
        
        response = requests.post(url, files=files, data=data, timeout=60)
        if not response.ok:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {response.status_code} - {response.text}")
        else:
            logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç {filename} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
    except requests.exceptions.Timeout:
        logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

def clean_text(text):
    """–û—á–∏—â–∞–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
    if not text:
        return ""
    text = re.sub(r'([–∞-—è–ê-–Øa-zA-Z])-\n([–∞-—è–ê-–Øa-zA-Z])', r'\1\2', text)
    text = re.sub(r'(?<!\n)\n(?!\n)', ' ', text)
    text = re.sub(r' +', ' ', text)
    text = '\n'.join(line.strip() for line in text.splitlines())
    return text.strip()

def extract_text_from_pdf(file_bytes, is_ocr_needed=False, progress_callback=None):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    if not is_ocr_needed:
        try:
            reader = PyPDF2.PdfReader(BytesIO(file_bytes))
            raw = "\n".join(page.extract_text() or "" for page in reader.pages)
            if raw.strip():
                logger.info("üìÑ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∏–∑ PDF")
                return clean_text(raw)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é: {e}")

    logger.info("üñºÔ∏è –ó–∞–ø—É—Å–∫ OCR...")
    try:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —É–º–µ–Ω—å—à–∞–µ–º DPI –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        images = convert_from_bytes(
            file_bytes, 
            dpi=150,  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 200 –¥–æ 150
            first_page=1, 
            last_page=10  # –ú–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–∞–Ω–∏—Ü
        )
        
        if len(images) > 10:
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–µ 10 —Å—Ç—Ä–∞–Ω–∏—Ü. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10.")
            if progress_callback:
                progress_callback("‚ö†Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
        
        ocr_text = ""
        for i, img in enumerate(images):
            if progress_callback:
                progress_callback(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {i+1}/{len(images)}")
            else:
                logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {i+1}/{len(images)}")
            
            try:
                # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
                if img.width > 2000 or img.height > 2000:
                    img.thumbnail((2000, 2000), Image.Resampling.LANCZOS)
                    logger.info(f"üìè –£–º–µ–Ω—å—à–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ {img.size}")
                
                # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã OCR
                text = pytesseract.image_to_string(
                    img, 
                    lang='rus+eng',
                    config='--psm 6 --oem 3 -c tessedit_char_whitelist=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è.,!?;:()[]{}"\'`~@#$%^&*+=|\\/<>-_ '
                )
                ocr_text += text + "\n"
                
                if progress_callback:
                    progress_callback(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                else:
                    logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                time.sleep(0.5)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ OCR –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {i+1}: {e}")
                if progress_callback:
                    progress_callback(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {i+1}, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                continue
                
        logger.info("‚úÖ OCR –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return clean_text(ocr_text)
        
    except Exception as e:
        logger.exception("üí• OCR –ø—Ä–æ–≤–∞–ª–µ–Ω")
        raise

@app.route("/webhook", methods=["POST"])
def telegram_webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Telegram —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        data = request.get_json()
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook: {data}")
        
        if not data or "message" not in data:
            logger.info("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö")
            return "OK", 200

        message = data["message"]
        message_id = message.get("message_id", "unknown")
        chat_id = message["chat"]["id"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ
        message_hash = get_message_hash(message)
        if is_message_processed(message_hash):
            logger.info(f"üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message_id}")
            return "OK", 200
        
        # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ
        mark_message_processed(message_hash)
        logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message_id}")

        if "text" in message:
            text = message["text"]
            if text == "/start":
                reply_markup = {
                    "keyboard": [[{"text": "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é"}]],
                    "resize_keyboard": True,
                    "one_time_keyboard": False
                }
                send_message(
                    chat_id,
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –≤ —Ç–µ–∫—Å—Ç.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
                    reply_markup
                )
            elif text == "/stop":
                send_message(chat_id, "üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
            else:
                send_message(
                    chat_id,
                    "üìé –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å PDF-—Ñ–∞–π–ª–∞–º–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é¬ª."
                )
        elif "document" in message:
            doc = message["document"]
            if doc.get("mime_type") != "application/pdf":
                send_message(chat_id, "‚ùå –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª—ã.")
                return "OK", 200

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = doc.get("file_size", 0)
            if file_size > 50 * 1024 * 1024:  # 50 –ú–ë
                send_message(chat_id, "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë")
                return "OK", 200
            
            if file_size > 10 * 1024 * 1024:  # 10 –ú–ë
                send_message(chat_id, "‚ö†Ô∏è –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª. –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")

            send_message(chat_id, "‚è≥ –ü—Ä–∏–Ω—è–ª PDF. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

            try:
                file_id = doc["file_id"]
                logger.info(f"üìÅ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª ID: {file_id}")
                
                resp = requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/getFile?file_id={file_id}", timeout=10)
                if not resp.ok:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {resp.status_code}")
                    send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.")
                    return "OK", 200
                
                file_path = resp.json()["result"]["file_path"]
                file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"
                
                file_resp = requests.get(file_url, timeout=60)  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                if not file_resp.ok:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {file_resp.status_code}")
                    send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.")
                    return "OK", 200
                
                file_bytes = file_resp.content
                logger.info(f"üìÑ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(file_bytes)} –±–∞–π—Ç")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–µ–∫—Å—Ç–æ–≤—ã–π PDF –∏–ª–∏ —Å–∫–∞–Ω?
                try:
                    reader = PyPDF2.PdfReader(BytesIO(file_bytes))
                    raw = "\n".join(page.extract_text() or "" for page in reader.pages)
                    is_ocr_needed = not raw.strip()
                    logger.info(f"üîç PDF —Ç–∏–ø: {'—Å–∫–∞–Ω (—Ç—Ä–µ–±—É–µ—Ç OCR)' if is_ocr_needed else '—Ç–µ–∫—Å—Ç–æ–≤—ã–π'}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ PDF: {e}")
                    is_ocr_needed = True

                if is_ocr_needed:
                    send_message(
                        chat_id,
                        "üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∫–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É—é OCR. –≠—Ç–æ –∑–∞–π–º—ë—Ç 1-3 –º–∏–Ω—É—Ç—ã..."
                    )

                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                def progress_callback(message):
                    logger.info(f"üìä {message}")

                text = extract_text_from_pdf(file_bytes, is_ocr_needed=is_ocr_needed, progress_callback=progress_callback)
                if not text.strip():
                    send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç.")
                    return "OK", 200

                base_name = doc.get("file_name", "converted")
                txt_name = os.path.splitext(base_name)[0] + ".txt"
                txt_buffer = BytesIO(text.encode("utf-8"))
                send_document(chat_id, txt_buffer, txt_name)

                reply_markup = {
                    "keyboard": [[{"text": "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é"}]],
                    "resize_keyboard": True,
                    "one_time_keyboard": False
                }
                send_message(
                    chat_id,
                    "‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á—ë–Ω.\n\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π PDF!",
                    reply_markup
                )

            except Exception as e:
                logger.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF")
                send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    except Exception as e:
        logger.exception("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ webhook")
        # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª –∑–∞–ø—Ä–æ—Å
        return "OK", 200

    return "OK", 200

def set_webhook():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
        webhook_url = WEBHOOK_URL.rstrip("/") + "/webhook"
        resp = requests.post(url, json={"url": webhook_url}, timeout=10)
        if resp.ok:
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {resp.status_code} - {resp.text}")
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    set_webhook()

    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)