import os
import sys
import logging
import asyncio
import requests
import re
from io import BytesIO
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import PyPDF2
from pdf2image import convert_from_bytes
import pytesseract
from PIL import Image
from dotenv import load_dotenv

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not BOT_TOKEN or not WEBHOOK_URL:
    logger.critical("‚ùå BOT_TOKEN or WEBHOOK_URL not set!")
    sys.exit(1)

app = Flask(__name__)
_bot_app = None


def get_application():
    global _bot_app
    if _bot_app is None:
        _bot_app = Application.builder().token(BOT_TOKEN).build()
        _bot_app.add_handler(CommandHandler("start", start))
        _bot_app.add_handler(MessageHandler(filters.Document.PDF, handle_pdf))
        _bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        asyncio.run(_bot_app.initialize())
        logger.info("‚úÖ Application initialized")
    return _bot_app


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def clean_text(text: str) -> str:
    """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ OCR."""
    if not text:
        return ""
    # –£–±–∏—Ä–∞–µ–º —Ä–∞–∑—Ä—ã–≤—ã —Å–ª–æ–≤ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Å–ª–æ-\n–≤–æ" ‚Üí "—Å–ª–æ–≤–æ")
    text = re.sub(r'([–∞-—è–ê-–Øa-zA-Z])-\n([–∞-—è–ê-–Øa-zA-Z])', r'\1\2', text)
    # –ó–∞–º–µ–Ω—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ \n –Ω–∞ –ø—Ä–æ–±–µ–ª (–≤–Ω—É—Ç—Ä–∏ –∞–±–∑–∞—Ü–µ–≤)
    text = re.sub(r'(?<!\n)\n(?!\n)', ' ', text)
    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r' +', ' ', text)
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫
    text = '\n'.join(line.strip() for line in text.splitlines())
    # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    return text.strip()


async def extract_text_from_pdf(file_bytes: bytes) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç: —Å–Ω–∞—á–∞–ª–∞ –∫–∞–∫ –µ—Å—Ç—å, –ø–æ—Ç–æ–º —á–µ—Ä–µ–∑ OCR."""
    # –ü–æ–ø—ã—Ç–∫–∞ 1: –æ–±—ã—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
    try:
        reader = PyPDF2.PdfReader(BytesIO(file_bytes))
        raw = "\n".join(page.extract_text() or "" for page in reader.pages)
        if raw.strip():
            logger.info("üìÑ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á—ë–Ω –Ω–∞–ø—Ä—è–º—É—é")
            return clean_text(raw)
    except Exception as e:
        logger.warning(f"–ü—Ä—è–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")

    # –ü–æ–ø—ã—Ç–∫–∞ 2: OCR
    logger.info("üñºÔ∏è –ó–∞–ø—É—Å–∫ OCR...")
    try:
        images = convert_from_bytes(file_bytes, dpi=200, thread_count=1)
        ocr_text = ""
        for i, img in enumerate(images):
            logger.info(f"üñºÔ∏è OCR —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}...")
            # rus+eng ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö —è–∑—ã–∫–æ–≤
            text = pytesseract.image_to_string(img, lang='rus+eng')
            ocr_text += text + "\n"
        logger.info("‚úÖ OCR –∑–∞–≤–µ—Ä—à—ë–Ω")
        return clean_text(ocr_text)
    except Exception as e:
        logger.exception("üí• OCR –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return ""


async def improve_text_with_openrouter(text: str) -> str:
    """–£–ª—É—á—à–∞–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OpenRouter (–µ—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å)."""
    if not OPENROUTER_API_KEY or not text.strip():
        return text

    prompt = f"""
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. –ò—Å–ø—Ä–∞–≤—å —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:
- –ò—Å–ø—Ä–∞–≤—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é.
- –£–¥–∞–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (—Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –æ–±—Ä—ã–≤–∫–∏).
- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–±–∑–∞—Ü—ã.
- –£–±–µ–¥–∏—Å—å, —á—Ç–æ –Ω–µ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤.
- –°–æ—Ö—Ä–∞–Ω–∏ —Å–º—ã—Å–ª –∏ —Å—Ç–∏–ª—å.
- –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.

–¢–µ–∫—Å—Ç:
{text}
"""
    try:
        resp = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={"Authorization": f"Bearer {OPENROUTER_API_KEY}"},
            json={
                "model": "nousresearch/hermes-3-llama-3.1-405b:free",  # –º–æ—â–Ω–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
                "messages": [{"role": "user", "content": prompt}]
            },
            timeout=60
        )
        if resp.status_code == 200:
            content = resp.json()["choices"][0]["message"]["content"].strip()
            logger.info("‚ú® –¢–µ–∫—Å—Ç —É–ª—É—á—à–µ–Ω –ò–ò")
            return content
        else:
            logger.error(f"OpenRouter error: {resp.status_code}")
            return text
    except Exception as e:
        logger.exception("OpenRouter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return text


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ PDF (–¥–∞–∂–µ —Å–∫–∞–Ω!) ‚Äî —è –∏–∑–≤–ª–µ–∫—É –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é —Ç–µ–∫—Å—Ç, –∏ –ø—Ä–∏—à–ª—é .txt —Ñ–∞–π–ª."
    )

async def handle_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"üì• PDF –æ—Ç {user.id}")

    try:
        doc = update.message.document
        if doc.mime_type != "application/pdf":
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF.")
            return

        file = await doc.get_file()
        file_bytes = await file.download_as_bytearray()
        logger.info(f"üíæ –†–∞–∑–º–µ—Ä: {len(file_bytes)} –±–∞–π—Ç")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (—Å OCR –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        raw_text = await extract_text_from_pdf(file_bytes)
        if not raw_text:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF.")
            return

        # –£–ª—É—á—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ò–ò (–µ—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å)
        final_text = await improve_text_with_openrouter(raw_text)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ TXT
        txt = BytesIO(final_text.encode("utf-8"))
        txt.name = "output.txt"
        await update.message.reply_document(document=txt)

        # –ö–Ω–æ–ø–∫–∞
        reply_markup = ReplyKeyboardMarkup(
            [[KeyboardButton("üìÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π PDF")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await update.message.reply_text(
            "‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª—è–π —Å–ª–µ–¥—É—é—â–∏–π PDF.",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –≤ handle_pdf")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª.")


# === WEBHOOK ===

@app.route("/webhook", methods=["POST"])
def telegram_webhook():
    json_data = request.get_json(force=True)
    if not json_data:
        return "Bad Request", 400
    application = get_application()
    update = Update.de_json(json_data, application.bot)
    asyncio.run(application.process_update(update))
    return "OK", 200


# === –£–°–¢–ê–ù–û–í–ö–ê WEBHOOK ===

def set_webhook_sync():
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
    resp = requests.post(url, json={"url": WEBHOOK_URL})
    if resp.ok and resp.json().get("ok"):
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {resp.text}")


# === –ó–ê–ü–£–°–ö ===

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    set_webhook_sync()
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port, use_reloader=False)
